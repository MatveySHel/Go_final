version: '3.8'
services:
  booking-service:
    build:
      context: .
      dockerfile: ./booking/Dockerfile
    env_file:
      - .env
    ports:
      - "8082:${BOOKING_HTTP_PORT}"
    depends_on:
      - booking-db
    networks:
      - app-network

  booking-db:
    image: postgres:15
    container_name: booking-db
    env_file:
      - .env
    ports:
      - "6432:${BOOKING_DB_PORT}"
    environment:
      POSTGRES_USER: ${BOOKING_DB_USER}
      POSTGRES_PASSWORD: ${BOOKING_DB_PASSWORD}
      POSTGRES_DB: ${BOOKING_DB_NAME}
    volumes:
      - booking-db-data:/var/lib/postgresql/data
    networks:
      - app-network
  hotel-service:
    build:
      context: .
      dockerfile: ./hotels/Dockerfile
    ports:
      - "8080:${HOTEL_HTTP_PORT}"
      - "8081:${HOTEL_GRPC_PORT}"
    env_file:
      - .env
    depends_on:
      - hotel-db
    networks:
      - app-network

  hotel-db:
    image: postgres:15
    container_name: hotel-db
    env_file:
      - .env
    ports:
      - "5432:${HOTEL_DB_PORT}"
    environment:
      POSTGRES_USER: ${HOTEL_DB_USER}
      POSTGRES_PASSWORD: ${HOTEL_DB_PASSWORD}
      POSTGRES_DB: ${HOTEL_DB_NAME}
    volumes:
      - hotel-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181" # Zookeeper будет доступен на порту 2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092" # Kafka брокер доступен на порту 9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network


  notification-svc:
    build:
      context: .
      dockerfile: ./notification/Dockerfile
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: ${BROKER_ADDR}
    env_file:
      - .env
    networks:
      - app-network

  telegram-bot:
    build:
      context: .
      dockerfile: ./api/telegram_bot/Dockerfile
    env_file:
      - .env
    networks:
      - app-network


volumes:
  booking-db-data:
  hotel-db-data:

networks:
  app-network:
    driver: bridge