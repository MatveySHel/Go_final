//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Booking Bookings
type Booking struct {
	// CheckIn дата заселения
	CheckIn *openapi_types.Date `json:"checkIn,omitempty"`

	// CheckOut дата отъезда
	CheckOut *openapi_types.Date `json:"checkOut,omitempty"`

	// Client Клиент
	Client *string `json:"client,omitempty"`

	// Hotel Название отеля
	Hotel *string `json:"hotel,omitempty"`

	// Id ID
	Id *int `json:"id,omitempty"`
}

// Error Сообщение об ошибках
type Error struct {
	Message *string `json:"message,omitempty"`
}

// GetClientBookingListJSONBody defines parameters for GetClientBookingList.
type GetClientBookingListJSONBody struct {
	// Client Имя клиента
	Client *string `json:"client,omitempty"`
}

// CreateNewBookingJSONBody defines parameters for CreateNewBooking.
type CreateNewBookingJSONBody struct {
	// CheckIn дата заселения
	CheckIn *openapi_types.Date `json:"checkIn,omitempty"`

	// CheckOut дата отъезда
	CheckOut *openapi_types.Date `json:"checkOut,omitempty"`

	// Client Клиент
	Client *string `json:"client,omitempty"`

	// Hotel Название отеля
	Hotel *string `json:"hotel,omitempty"`
}

// GetHotelBookingListJSONBody defines parameters for GetHotelBookingList.
type GetHotelBookingListJSONBody struct {
	// Hotel Название отеля
	Hotel *string `json:"hotel,omitempty"`
}

// GetClientBookingListJSONRequestBody defines body for GetClientBookingList for application/json ContentType.
type GetClientBookingListJSONRequestBody GetClientBookingListJSONBody

// CreateNewBookingJSONRequestBody defines body for CreateNewBooking for application/json ContentType.
type CreateNewBookingJSONRequestBody CreateNewBookingJSONBody

// GetHotelBookingListJSONRequestBody defines body for GetHotelBookingList for application/json ContentType.
type GetHotelBookingListJSONRequestBody GetHotelBookingListJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить массив с информацией о бронированиях Клиента
	// (GET /booking)
	GetClientBookingList(w http.ResponseWriter, r *http.Request)
	// Создать новое бронирование
	// (POST /booking)
	CreateNewBooking(w http.ResponseWriter, r *http.Request)
	// Получить массив с информацией о бронированиях Отеля
	// (GET /bookings)
	GetHotelBookingList(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetClientBookingList operation middleware
func (siw *ServerInterfaceWrapper) GetClientBookingList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClientBookingList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNewBooking operation middleware
func (siw *ServerInterfaceWrapper) CreateNewBooking(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNewBooking(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHotelBookingList operation middleware
func (siw *ServerInterfaceWrapper) GetHotelBookingList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHotelBookingList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/booking", wrapper.GetClientBookingList)
	m.HandleFunc("POST "+options.BaseURL+"/booking", wrapper.CreateNewBooking)
	m.HandleFunc("GET "+options.BaseURL+"/bookings", wrapper.GetHotelBookingList)

	return m
}
